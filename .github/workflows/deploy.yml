name: Spring Boot CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: travel_db
          MYSQL_USER: user
          MYSQL_PASSWORD: userpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -uroot -proot --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done
          echo "MySQL is ready!"

      - name: Verify MySQL Connection
        run: |
          mysql -h 127.0.0.1 -uroot -proot -e "SHOW DATABASES;"

      - name: Build & Test Spring Boot
        run: |
          cd backend-web
          chmod +x mvnw
          ./mvnw clean package -DskipTests

  docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_PASS }}" | docker login -u "${{ secrets.DOCKER_HUB_USER }}" --password-stdin

      - name: Build & Tag Docker Images
        run: |
          docker-compose build
          docker tag ad-project_springboot ${{ secrets.DOCKER_HUB_USER }}/springboot-app:latest
          docker tag ad-project_frontend ${{ secrets.DOCKER_HUB_USER }}/frontend-app:latest

      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKER_HUB_USER }}/springboot-app:latest
          docker push ${{ secrets.DOCKER_HUB_USER }}/frontend-app:latest

  deploy:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Decode and save EC2 SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: SSH into EC2 and deploy Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/AD-Project
            git pull origin main
            docker-compose down
            docker-compose pull
            docker-compose up --build -d
          EOF
