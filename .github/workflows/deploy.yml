name: Deploy Backend to EC2 using Docker

on:
  push:
    branches:
      - deploy

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Pull code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Compile Spring Boot application
        run: |
          mvn clean package -DskipTests
          ls -la target/

      - name: Make sure the JAR file exists
        run: test -f target/backend-web-0.0.1-SNAPSHOT.jar || exit 1

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build a Docker image
        run: |
          docker build -t hzhenj/backend-web .
          docker tag hzhenj/backend-web:latest hzhenj/backend-web:latest

      - name: Push the Docker image to Docker Hub
        run: docker push hzhenj/backend-web:latest

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Make sure Docker is installed
            if ! command -v docker &> /dev/null
            then
              echo "ðŸš€ Docker is not installed, start installing..."
              sudo apt update
              sudo apt install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "âœ… Docker is installed"
            fi

            # Make sure the `ubuntu` user has Docker permissions
            if ! groups | grep -q "docker"
            then
              echo "ðŸ”‘ Granting Docker access to the ubuntu user..."
              sudo usermod -aG docker $USER
              newgrp docker
            else
              echo "âœ… The ubuntu user already has Docker permissions"
            fi

            # Pull the latest Docker image
            docker pull hzhenj/backend-web:latest

            # Forcefully delete existing `backend-web` container (whether running or not)
            if [ "$(docker ps -aq -f name=backend-web)" ]; then
              echo "ðŸ”´ Remove old backend-web container..."
              docker stop backend-web || true
              docker rm backend-web
            else
              echo "âœ… There is no backend-web container to delete"
            fi

            # Run new container
            echo "ðŸš€ Start new container..."
            docker run -d --name backend-web -p 8080:8080 hzhenj/backend-web:latest


